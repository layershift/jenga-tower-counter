{"version":3,"file":"alert.js","sourceRoot":"","sources":["../../src/alert/alert.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ChangeDetectionStrategy,\n  ViewContainerRef,\n  Injector,\n  OnDestroy,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Renderer,\n  TemplateRef\n} from '@angular/core';\n\nimport {PopupService} from '../util/popup';\nimport {NgbAlertConfig, NgbSelfClosingAlertConfig} from './alert-config';\n\n/**\n * Alerts can be used to provide feedback messages.\n */\n\nexport class NgbAlert {\n  /**\n   * A flag indicating if a given alert can be dismissed (closed) by a user. If this flag is set, a close button (in a\n   * form of an ×) will be displayed.\n   */\n   dismissible: boolean;\n  /**\n   * Alert type (CSS class). Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\n   */\n   type: string;\n  /**\n   * An event emitted when the close button is clicked. This event has no payload. Only relevant for dismissible alerts.\n   */\n   close = new EventEmitter();\n\n  constructor(config: NgbAlertConfig) {\n    this.dismissible = config.dismissible;\n    this.type = config.type;\n  }\n\n  closeHandler() { this.close.emit(null); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-alert',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div [class]=\"'alert alert-' + type\" role=\"alert\">\n      <button *ngIf=\"dismissible\" type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"closeHandler()\">\n            <span aria-hidden=\"true\">&times;</span>\n      </button>\n      <ng-content></ng-content>\n    </div>\n    `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbAlertConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dismissible': [{ type: Input },],\n'type': [{ type: Input },],\n'close': [{ type: Output },],\n};\n}\n\n/**\n * Alerts that can be dismissed without any additional code.\n */\n\nexport class NgbSelfClosingAlert implements OnInit, OnDestroy {\n  private _popupService: PopupService<NgbAlert>;\n  private _timeout;\n\n  /**\n   * A flag indicating if the alert can be dismissed (closed) by a user. If this flag is set, a close button (in a\n   * form of an ×) will be displayed.\n   */\n   dismissible: boolean;\n  /**\n   * Alert type (CSS class). Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\n   */\n   type: string;\n  /**\n   * An event emitted when the close button is clicked.\n   */\n   closeEvent = new EventEmitter();\n  /**\n   *  Time, in milliseconds, before the alert auto closes.\n   */\n   dismissOnTimeout: number;\n\n  constructor(\n      private _templateRef: TemplateRef<Object>, viewContainerRef: ViewContainerRef, injector: Injector,\n      componentFactoryResolver: ComponentFactoryResolver, renderer: Renderer, config: NgbSelfClosingAlertConfig) {\n    this._popupService =\n        new PopupService<NgbAlert>(NgbAlert, injector, viewContainerRef, renderer, componentFactoryResolver);\n    this.dismissible = config.dismissible;\n    this.type = config.type;\n    this.dismissOnTimeout = config.dismissOnTimeout;\n  }\n\n  close(): void { this._popupService.close(); }\n\n  ngOnInit() {\n    const windowRef = this._popupService.open(this._templateRef);\n    windowRef.instance.type = this.type;\n    windowRef.instance.dismissible = this.dismissible;\n    windowRef.instance.close.subscribe(($event) => {\n      this.closeEvent.emit($event);\n      this.close();\n    });\n    if (this.dismissOnTimeout) {\n      this._timeout = setTimeout(() => { this.close(); }, this.dismissOnTimeout);\n    }\n  }\n\n  ngOnDestroy() { clearTimeout(this._timeout); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'template[ngbAlert]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: Injector, },\n{type: ComponentFactoryResolver, },\n{type: Renderer, },\n{type: NgbSelfClosingAlertConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dismissible': [{ type: Input },],\n'type': [{ type: Input },],\n'closeEvent': [{ type: Output, args: ['close', ] },],\n'dismissOnTimeout': [{ type: Input },],\n};\n}\n\nexport const NGB_ALERT_DIRECTIVES = [NgbAlert, NgbSelfClosingAlert];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
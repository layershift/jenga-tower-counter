{"version":3,"file":"dropdown.js","sourceRoot":"","sources":["../../src/dropdown/dropdown.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, Input, Output, HostListener, EventEmitter} from '@angular/core';\nimport {NgbDropdownConfig} from './dropdown-config';\n\n/**\n * Transforms a node into a dropdown.\n */\n\nexport class NgbDropdown {\n  /**\n   * Indicates that the dropdown should open upwards\n   */\n   up: boolean;\n\n  /**\n   * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.\n   */\n   autoClose: boolean;\n\n  /**\n   *  Defines whether or not the dropdown-menu is open initially.\n   */\n   private _open = false;\n\n  /**\n   *  An event fired when the dropdown is opened or closed.\n   *  Event's payload equals whether dropdown is open.\n   */\n   openChange = new EventEmitter();\n\n  constructor(config: NgbDropdownConfig) {\n    this.up = config.up;\n    this.autoClose = config.autoClose;\n  }\n\n\n  /**\n   * Checks if the dropdown menu is open or not.\n   */\n  isOpen(): boolean { return this._open; }\n\n  /**\n   * Opens the dropdown menu of a given navbar or tabbed navigation.\n   */\n  open(): void {\n    if (!this._open) {\n      this._open = true;\n      this.openChange.emit(true);\n    }\n  }\n\n  /**\n   * Closes the dropdown menu of a given navbar or tabbed navigation.\n   */\n  close(): void {\n    if (this._open) {\n      this._open = false;\n      this.openChange.emit(false);\n    }\n  }\n\n  /**\n   * Toggles the dropdown menu of a given navbar or tabbed navigation.\n   */\n  toggle(): void {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  closeFromOutside() {\n    if (this.autoClose) {\n      this.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngbDropdown]',\n  exportAs: 'ngbDropdown',\n  host: {\n    '[class.dropdown]': '!up',\n    '[class.dropup]': 'up',\n    '[class.open]': 'isOpen()',\n    '(keyup.esc)': 'closeFromOutside()',\n    '(document:click)': 'closeFromOutside()'\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbDropdownConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'up': [{ type: Input },],\n'autoClose': [{ type: Input },],\n'_open': [{ type: Input, args: ['open', ] },],\n'openChange': [{ type: Output },],\n};\n}\n\n/**\n * Allows the dropdown to be toggled via click. This directive is optional.\n */\n\nexport class NgbDropdownToggle {\n  constructor(private _dropdown: NgbDropdown) {}\n\n  \n  toggleOpen($event) {\n    $event.stopPropagation();\n    this._dropdown.toggle();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngbDropdownToggle]',\n  host: {'class': 'dropdown-toggle', 'aria-haspopup': 'true', '[attr.aria-expanded]': '_dropdown.isOpen()'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbDropdown, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'toggleOpen': [{ type: HostListener, args: ['click', ['$event'], ] },],\n};\n}\n\nexport const NGB_DROPDOWN_DIRECTIVES = [NgbDropdownToggle, NgbDropdown];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}